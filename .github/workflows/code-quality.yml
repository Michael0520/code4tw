name: Code Quality & Standards

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  code-standards:
    name: Code Standards Validation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.0.0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Validate magic numbers
        run: |
          echo "Checking for magic numbers..."
          # This is a simplified check - actual implementation would use ESLint
          if grep -r "\b[0-9]\{2,\}\b" --include="*.ts" --include="*.tsx" --exclude-dir=node_modules --exclude="**/*.test.*" --exclude="**/*.config.*" .; then
            echo "⚠️  WARNING: Potential magic numbers found. Please externalize to configuration."
          fi

      - name: TypeScript type checking
        run: pnpm check-types

      - name: ESLint with English-only rules
        run: pnpm lint

      - name: Test execution and coverage
        run: |
          pnpm test:coverage
          echo "Checking coverage thresholds..."
          # Domain layer should have 100% coverage
          # Application layer should have 80% coverage

  architecture-validation:
    name: DDD Architecture Validation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate DDD layer dependencies
        run: |
          echo "Validating DDD architecture boundaries..."

          # Check Domain layer purity (no external imports)
          echo "Checking Domain layer dependencies..."
          violations=$(find . -path "*/domain/**/*.ts" -not -path "*/node_modules/*" -not -path "**/__tests__/*" -exec grep -l "from.*infrastructure\|from.*presentation\|from.*external" {} \; | head -5)
          if [ -n "$violations" ]; then
            echo "❌ FAIL: Domain layer has external dependencies"
            echo "$violations"
            echo "Domain layer must be pure - no infrastructure or presentation dependencies"
            exit 1
          fi

          # Check if repositories are interfaces in domain
          echo "Checking repository interfaces..."
          find . -path "*/domain/repositories/*.ts" -not -path "*/node_modules/*" -exec grep -L "interface.*Repository" {} \; | while read file; do
            echo "⚠️  WARNING: $file should contain repository interface"
          done

          # Check infrastructure implements domain interfaces
          echo "Checking infrastructure implementations..."
          find . -path "*/infrastructure/repositories/*.ts" -not -path "*/node_modules/*" -exec grep -L "implements.*Repository" {} \; | while read file; do
            echo "⚠️  WARNING: $file should implement domain repository interface"
          done

      - name: Check test structure compliance
        run: |
          echo "Validating test structure..."

          # Check for co-located tests
          find . -name "*.ts" -not -path "*/node_modules/*" -not -path "**/__tests__/*" -not -path "**/*.test.*" -not -path "**/*.config.*" | while read file; do
            testfile=$(dirname "$file")/__tests__/$(basename "$file" .ts).test.ts
            if [ ! -f "$testfile" ] && [[ "$file" == */src/* ]]; then
              echo "⚠️  WARNING: Missing test file for $file"
            fi
          done

          # Check test naming convention
          find . -name "*.test.ts" -not -path "*/node_modules/*" -exec grep -L "describe\|it.*should.*when" {} \; | while read file; do
            echo "⚠️  WARNING: $file may not follow AAA test pattern"
          done

  configuration-validation:
    name: Config-Driven Validation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check configuration externalization
        run: |
          echo "Validating configuration externalization..."

          # Check for hardcoded URLs (exclude config, test files, and type definitions)
          if grep -r "http[s]*://" --include="*.ts" --include="*.tsx" --exclude-dir=node_modules --exclude="**/config/**" --exclude="**/*.test.*" --exclude="**/*.spec.*" --exclude="**/next-env.d.ts" .; then
            echo "⚠️  WARNING: Hardcoded URLs found. Consider externalizing to configuration."
          else
            echo "✅ PASS: No problematic hardcoded URLs found"
          fi

          # Check for business rule constants
          if grep -r "setTimeout.*[0-9]" --include="*.ts" --include="*.tsx" --exclude-dir=node_modules --exclude="**/config/**" .; then
            echo "⚠️  WARNING: Hardcoded timeouts found. Consider using configuration constants."
          fi

          # Verify configuration files exist
          required_configs=(
            "apps/website/configs/app-config.ts"
            "apps/website/configs/business-rules.ts"
            "apps/website/configs/feature-flags.ts"
          )

          for config in "${required_configs[@]}"; do
            if [ ! -f "$config" ]; then
              echo "❌ FAIL: Required configuration file missing: $config"
              exit 1
            else
              echo "✅ PASS: Configuration file exists: $config"
            fi
          done

  security-scan:
    name: Security & Secrets Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for exposed secrets
        run: |
          echo "Scanning for potential secrets..."

          # Check for common secret patterns
          patterns=(
            "api[_-]?key.*=.*['\"][^'\"]{10,}"
            "secret.*=.*['\"][^'\"]{10,}"
            "password.*=.*['\"][^'\"]{8,}"
            "token.*=.*['\"][^'\"]{10,}"
            "jwt.*=.*['\"][^'\"]{10,}"
          )

          for pattern in "${patterns[@]}"; do
            if grep -r -i "$pattern" --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" --exclude-dir=node_modules .; then
              echo "❌ FAIL: Potential secret found matching pattern: $pattern"
              echo "Secrets should never be committed to the repository"
              exit 1
            fi
          done

          echo "✅ PASS: No obvious secrets detected"

      - name: Validate environment variable usage
        run: |
          echo "Checking environment variable patterns..."

          # Check for proper environment variable usage
          if grep -r "process\.env\." --include="*.ts" --include="*.tsx" --exclude-dir=node_modules --exclude="**/config/**" .; then
            echo "⚠️  WARNING: Direct process.env usage outside config. Consider centralizing in configuration."
          fi

  commit-standards:
    name: Commit Message Standards
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate commit messages
        run: |
          echo "Validating commit message standards..."

          # Get commits in this PR
          commits=$(git rev-list --no-merges origin/main..HEAD)

          for commit in $commits; do
            message=$(git log --format=%B -n 1 $commit)

            # Check for Chinese characters in commit messages
            if echo "$message" | grep -q "[\u4e00-\u9fff\u3400-\u4dbf\uf900-\ufaff]"; then
              echo "❌ FAIL: Chinese characters found in commit message: $commit"
              echo "Commit messages must be in English only"
              exit 1
            fi

            # Check conventional commit format
            if ! echo "$message" | grep -q "^(feat\|fix\|docs\|style\|refactor\|test\|chore\|perf)"; then
              echo "⚠️  WARNING: Commit $commit may not follow conventional commit format"
            fi
          done

          echo "✅ PASS: All commit messages comply with standards"

  documentation:
    name: Documentation Requirements
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check required documentation
        run: |
          echo "Validating documentation requirements..."

          required_docs=(
            "CLAUDE.md"
            "CODE_REVIEW_CHECKLIST.md"
            "README.md"
          )

          for doc in "${required_docs[@]}"; do
            if [ ! -f "$doc" ]; then
              echo "❌ FAIL: Required documentation missing: $doc"
              exit 1
            else
              echo "✅ PASS: Documentation exists: $doc"
            fi
          done

      - name: Check JSDoc coverage
        run: |
          echo "Checking JSDoc documentation coverage..."
          # This would ideally use a tool like jsdoc-coverage
          find . -name "*.ts" -not -path "*/node_modules/*" -not -path "**/*.test.*" -not -path "**/*.config.*" | while read file; do
            if grep -q "export.*class\|export.*interface\|export.*function" "$file" && ! grep -q "/\*\*" "$file"; then
              echo "⚠️  WARNING: $file may be missing JSDoc documentation"
            fi
          done

  summary:
    name: Quality Gate Summary
    runs-on: ubuntu-latest
    needs: [code-standards, architecture-validation, configuration-validation, security-scan, documentation]
    if: always()

    steps:
      - name: Quality Gate Status
        run: |
          echo "=== Code Quality Gate Summary ==="
          echo ""
          echo "✅ Core Standards:"
          echo "   - English-only codebase: ${{ needs.code-standards.result }}"
          echo "   - TypeScript compliance: ${{ needs.code-standards.result }}"
          echo "   - Test coverage: ${{ needs.code-standards.result }}"
          echo ""
          echo "✅ Architecture:"
          echo "   - DDD layer boundaries: ${{ needs.architecture-validation.result }}"
          echo "   - Test structure: ${{ needs.architecture-validation.result }}"
          echo ""
          echo "✅ Configuration:"
          echo "   - Config externalization: ${{ needs.configuration-validation.result }}"
          echo "   - Feature flags: ${{ needs.configuration-validation.result }}"
          echo ""
          echo "✅ Security:"
          echo "   - Secret scanning: ${{ needs.security-scan.result }}"
          echo "   - Environment variables: ${{ needs.security-scan.result }}"
          echo ""
          echo "✅ Documentation:"
          echo "   - Required docs: ${{ needs.documentation.result }}"
          echo "   - JSDoc coverage: ${{ needs.documentation.result }}"
          echo ""

          if [[ "${{ needs.code-standards.result }}" == "failure" || "${{ needs.architecture-validation.result }}" == "failure" || "${{ needs.configuration-validation.result }}" == "failure" || "${{ needs.security-scan.result }}" == "failure" ]]; then
            echo "❌ QUALITY GATE FAILED"
            echo "Please review the failed checks above and ensure all Code4TW development standards are met."
            exit 1
          else
            echo "✅ QUALITY GATE PASSED"
            echo "All Code4TW development standards have been met!"
          fi