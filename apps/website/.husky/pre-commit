#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

echo "üîç Running pre-commit code quality checks..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    local status=$1
    local message=$2
    case $status in
        "PASS")
            echo -e "${GREEN}‚úÖ PASS: $message${NC}"
            ;;
        "FAIL")
            echo -e "${RED}‚ùå FAIL: $message${NC}"
            ;;
        "WARN")
            echo -e "${YELLOW}‚ö†Ô∏è  WARNING: $message${NC}"
            ;;
    esac
}

FAILED=0

echo ""
echo "1. TypeScript type checking..."
echo "-----------------------------"
if pnpm check-types; then
    print_status "PASS" "TypeScript type checking passed"
else
    print_status "FAIL" "TypeScript type checking failed"
    FAILED=1
fi

echo ""
echo "2. ESLint checking..."
echo "-------------------"
if pnpm lint; then
    print_status "PASS" "ESLint check passed"
else
    print_status "FAIL" "ESLint check failed"
    FAILED=1
fi

echo ""
echo "3. Test execution..."
echo "------------------"
if pnpm test:coverage; then
    print_status "PASS" "All tests passed"
else
    print_status "FAIL" "Some tests failed"
    FAILED=1
fi

echo ""
echo "4. Configuration validation..."
echo "-----------------------------"
required_configs=(
    "apps/website/configs/app-config.ts"
    "apps/website/configs/business-rules.ts"
    "apps/website/configs/feature-flags.ts"
)

for config in "${required_configs[@]}"; do
    if [ ! -f "$config" ]; then
        print_status "FAIL" "Required configuration file missing: $config"
        FAILED=1
    else
        print_status "PASS" "Configuration file exists: $config"
    fi
done

echo ""
echo "5. Checking for hardcoded URLs..."
echo "--------------------------------"
if grep -r "http[s]*://" --include="*.ts" --include="*.tsx" --exclude-dir=node_modules --exclude="**/config/**" --exclude="apps/web/**" .; then
    print_status "WARN" "Hardcoded URLs found. Consider externalizing to configuration."
else
    print_status "PASS" "No hardcoded URLs found"
fi

echo ""
echo "üìã Pre-commit Summary"
echo "===================="

if [ $FAILED -eq 0 ]; then
    print_status "PASS" "All pre-commit checks passed! üéâ"
    echo ""
    echo "‚ú® Ready to commit!"
    exit 0
else
    print_status "FAIL" "Some pre-commit checks failed"
    echo ""
    echo "‚ùå Please fix the issues above before committing."
    exit 1
fi